import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;

import javax.imageio.ImageIO;
import javax.swing.Icon;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.eclipse.swt.widgets.Item;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfFloat;
import org.opencv.core.MatOfInt;
import org.opencv.core.Range;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

//import GUI.HashMapIndexing;

public class images {

	public static ArrayList<Image> details(Icon icon, String queryImgStr) {

		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);

		// File representing the folder that you select using a FileChooser
		//final File dir = new File("C:\\Users\\acreg\\Desktop\\final year\\Project\\workspace\\GUI\\res");
		final File dir = new File("res");


		// array of supported extensions (use a List if you prefer)
		final String[] EXTENSIONS = new String[]{
				"jpg" // and other formats you need
		};
		// filter to identify images based on their extensions
		final FilenameFilter IMAGE_FILTER = new FilenameFilter() {

			@Override
			public boolean accept(final File dir, final String name) {
				for (final String ext : EXTENSIONS) {
					if (name.endsWith("." + ext)) {
						return (true);
					}
				}
				return (false);
			}
		};

		Image[] sortedImgs = null;
		ArrayList<String> imgsDir = new ArrayList<String>();
		ArrayList<Image> unproImgs = new ArrayList<Image>();
		ArrayList<Image> proImgs = new ArrayList<Image>();
		ArrayList<Mat> unproImgsMat = new ArrayList<Mat>();

		Mat matQueryImg = Imgcodecs.imread("res//Horses001.jpg");

		if (dir.isDirectory()) { // make sure it's a directory
			for (final File f : dir.listFiles(IMAGE_FILTER)) {
				BufferedImage img = null;
				Mat matIm = null;

				try {
					img = ImageIO.read(f);
					matIm = Imgcodecs.imread(f.toString());

					imgsDir.add(f.toString());
					//all images in list
					unproImgs.add(img);
					unproImgsMat.add(matIm);
					System.out.println("image: " + f.getName());

				} catch (final IOException e) {
					// handle errors here
				}		
			}

			ArrayList<Double> meth1 = new ArrayList<Double>();
			meth1 = new CompareHist().run(imgsDir, unproImgsMat, matQueryImg);

			for (double s : meth1){
				System.out.println(s);
			}
			System.out.println("-----------------------");
			Collections.sort(meth1);
			// print sorted list
			for (double s : meth1){
				System.out.println(s);

			}

			//remove sort before
			//list1 image
			//list2 double
			
			
		
			//taking top 10 images
			//for (int i = 0; i < 10; i++) {	
			//System.out.println(retrievedImagesHI[i]);
			//proImgs.add(unproImgs.get(i));
			//}
		}

		return proImgs;

	}

}
