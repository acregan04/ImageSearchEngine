import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.Serializable;
import javax.imageio.ImageIO;

public class saveData implements Serializable{

	private static final long serialVersionUID = 1L;

	private static final FileFilter IMAGE_FILTER = new FileFilter() {
		@Override
		public boolean accept(final File file) {
			if (file.isDirectory()) {
				return false;
			}
			final String name = file.getName();
			return name.endsWith(".jpg") || name.endsWith(".png");
		}
	};


	public static void HSVSaver() throws IOException {

		final File dir = new File("src\\test");
		ArrayList<String> imgsDir = new ArrayList<String>();
		ArrayList<byte[]> imageBytes = new ArrayList<byte[]>();
		ArrayList<float[][][]> imageMatrices = new ArrayList<>();

		if (dir.isDirectory()) { // make sure it's a directory

			//insert popup msg
			//return
		}

		for (final File f : dir.listFiles(IMAGE_FILTER)) {
			try {
				BufferedImage image = ImageIO.read(f);
				int width = image.getWidth();
				int height = image.getHeight();
				float[][][] hsvImage = new float[height][width][3];

				for (int y = 0; y < height; y++) {
					for (int x = 0; x < width; x++) {
						int rgb = image.getRGB(x, y);
						int r = (rgb >> 16) & 0xff;
						int g = (rgb >> 8) & 0xff;
						int b = rgb & 0xff;

						float[] hsv = images.RGBtoHSV(r, g, b);
						hsvImage[y][x][0] = hsv[0];
						hsvImage[y][x][1] = hsv[1];
						hsvImage[y][x][2] = hsv[2];
					}
				}
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				ImageIO.write(image, "jpg", baos);
				byte[] bytes = baos.toByteArray();
				imageBytes.add(bytes);
				imageMatrices.add(hsvImage);
				imgsDir.add(f.toString());
				System.out.println("image: " + f.getName());

			} catch (final IOException e) {
				// handle errors here
			}
		}

		try {
			FileOutputStream fileOut = new FileOutputStream("imageData.ser");
			ObjectOutputStream out = new ObjectOutputStream(fileOut);
			out.writeObject(imageBytes);
			//out.writeObject(imageMatrices);
			out.writeObject(imgsDir);
			out.close();
			fileOut.close();
			System.out.printf("Serialized data is saved in imageData.ser");
		} catch (IOException i) {
			i.printStackTrace();
		}



		//STORE IMAGE MATRICES
		// Create a new file
		File file = new File("src\\data.txt");

		if (file.exists()) {
		    file.delete();
		}


		// open the file for writing
		PrintWriter writer = new PrintWriter(file);

		// loop over the data and write each value to the file
		for (float[][][] matrix : imageMatrices) {
		    for (float[][] row : matrix) {
		        writer.print("[");
		        for (int i = 0; i < row.length; i++) {
		            writer.print("[" + row[i][0] + ", " + row[i][1] + ", " + row[i][2] + "]");
		            if (i != row.length - 1) {
		                writer.print(", ");
		            }
		        }
		        writer.print("]");
		        writer.println(",");
		    }
		    writer.println();
		}

		// close the file
		writer.close();
	}


	public static ArrayList<float[][][]> readHSV() throws IOException {
		File file = new File("src\\data.txt");

		 ArrayList<float[][][]> imageMatrices = new ArrayList<>();
		    Scanner scanner = new Scanner(file);

		    while (scanner.hasNext()) {
		        List<float[][]> matrix = new ArrayList<>();
		        String line = scanner.nextLine().trim();

		        while (!line.isEmpty()) {
		            String[] rowValues = line.split(",");
		            float[][] row = new float[rowValues.length / 3][3];

		            for (int i = 0; i < rowValues.length; i += 3) {
		                row[i / 3][0] = Float.parseFloat(rowValues[i].trim());
		                row[i / 3][1] = Float.parseFloat(rowValues[i + 1].trim());
		                row[i / 3][2] = Float.parseFloat(rowValues[i + 2].trim());
		            }

		            matrix.add(row);
		            line = scanner.nextLine().trim();
		        }

		        imageMatrices.add(matrix.toArray(new float[0][][]));
		    }

		    scanner.close();
		    return imageMatrices;
	}



	
	


	public static void saver(ArrayList<Double>[] scores) throws IOException {

		// Create a new file
		File file = new File("src\\scores.csv");

		if (file.exists()) {
			file.delete();

			// Write the data
			FileWriter writer = new FileWriter(file);
			for (int i = 0; i < scores.length; i++) {
				// Write the ID
				writer.write("ID" + (i+1) + ",");
				//ID1*Correlation*
				//ID2 *Chi-square*
				//ID3*Intersection*
				//ID4*Bhattacharyya*

				// Write the scores
				List<Double> row = scores[i];
				for (Double score : row) {
					writer.write(score + ",");
				}

				// Move to next row
				writer.write("\n");
			}

			// Close the file
			writer.close();
		}

	}
	public static ArrayList<Double>[] readScores() throws FileNotFoundException {

		String fileName = "src\\scores.csv";

		List<ArrayList<Double>> result = new ArrayList<>();
		Scanner scanner = new Scanner(new File(fileName));
		while (scanner.hasNextLine()) {
			ArrayList<Double> row = new ArrayList<>();
			String[] data = scanner.nextLine().split(",");
			for (int i = 1; i < data.length; i++) {
				row.add(Double.parseDouble(data[i]));
			}
			result.add(row);
		}
		scanner.close();
		return result.toArray(new ArrayList[0]);
	}

}